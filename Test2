getgenv().autoDigsiteConfig = {
	ACCOUNT_POSITIONS = 1,
	DIG_DEPTH = 5, -- How deep to dig in each position
	BLOCK_BREAK_DELAY = 0.1, -- Amount of time in seconds to wait before breaking a block
	CHEST_BREAK_DELAY = 0.1, -- Amount of time in seconds to wait before breaking a chest

	ANTI_AFK = flase,
	OPTIMIZE_GAME = false, -- Optimize the game by removing unnecessary parts
	DIGSITE_RESET_DELAY = 15, -- Amount of time in seconds to wait before starting the script back up after the digsite resets
	LOAD_DELAY = 5, -- How long to wait afterr loading in before starting the script
}

local digsiteReset = false
local positions

if getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 1 then
	positions = {
[1] = Vector3.new(16, 1, 2),
[2] = Vector3.new(16, 1, 5),
[3] = Vector3.new(16, 1, 8),
[4] = Vector3.new(16,1,11),
[5] = Vector3.new(16, 1, 14),
[6] = Vector3.new(14, 1, 1),
[7] = Vector3.new(14, 1, 3),
[8] = Vector3.new(14, 1, 4),
[9] = Vector3.new(14, 1, 6),
[10] = Vector3.new(14, 1, 7),
[11] = Vector3.new(14, 1, 9),
[12] = Vector3.new(14, 1, 10),
[13] = Vector3.new(14, 1, 12),
[14] = Vector3.new(14, 1, 13),
[15] = Vector3.new(14, 1, 15),
[16] = Vector3.new(12, 1, 2),
[17] = Vector3.new(12, 1, 5),
[18] = Vector3.new(12, 1, 8),
[19] = Vector3.new(12, 1, 11),
[20] = Vector3.new(12, 1, 14),
[21] = Vector3.new(12, 1, 16),
[22] = Vector3.new(10, 1, 1),
[23] = Vector3.new(10, 1, 3),
[24] = Vector3.new(10, 1, 4),
[25] = Vector3.new(10, 1, 6),
[26] = Vector3.new(10, 1, 7),
[27] = Vector3.new(10, 1, 9),
[28] = Vector3.new(10, 1, 10),
[29] = Vector3.new(10, 1, 12),
[30] = Vector3.new(10, 1, 13),
[31] = Vector3.new(10, 1, 15),
[32] = Vector3.new(8, 1, 2),
[33] = Vector3.new(8, 1, 5),
[34] = Vector3.new(8, 1, 8),
[35] = Vector3.new(8, 1, 11),
[36] = Vector3.new(8, 1, 14),
[37] = Vector3.new(8, 1, 16),
[38] = Vector3.new(6, 1, 1),
[39] = Vector3.new(6, 1, 3),
[40] = Vector3.new(6, 1, 4),
[41] = Vector3.new(6, 1, 6),
[42] = Vector3.new(6, 1, 7),
[43] = Vector3.new(6, 1, 9),
[44] = Vector3.new(6, 1, 10),
[45] = Vector3.new(6, 1, 12),
[46] = Vector3.new(6, 1, 13),
[47] = Vector3.new(6, 1, 15),
[48] = Vector3.new(4, 1, 2),
[49] = Vector3.new(4, 1, 5),
[50] = Vector3.new(4, 1, 8),
[51] = Vector3.new(4, 1, 11),
[52] = Vector3.new(4, 1, 14),
[53] = Vector3.new(4, 1, 16),
[54] = Vector3.new(2, 1, 1),
[55] = Vector3.new(2, 1, 3),
[56] = Vector3.new(2, 1, 4),
[57] = Vector3.new(2, 1, 6),
[58] = Vector3.new(2, 1, 7),
[59] = Vector3.new(2, 1, 9),
[60] = Vector3.new(2, 1, 10),
[61] = Vector3.new(2, 1, 12),
[62] = Vector3.new(2, 1, 13),
[63] = Vector3.new(2, 1, 15),
	}

end


local function checkForChests()
	for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveChests:GetChildren()) do
		if v:IsA("Model") then
			pcall(function()
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Top.CFrame
				task.wait(getgenv().autoDigsiteConfig.CHEST_BREAK_DELAY)
				game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigChest", v:GetAttribute('Coord'))
				task.wait()
				v:Destroy()
			end)
		end
		if digsiteReset then
			print("Digsite reset while breaking chests, breaking out of loop")
			return
		end
	end
end




local function dig()
	digsiteReset = false
	print("Starting digging")
	-- repeat through all positions
	for curPos, _ in positions do

		-- GETS TOP-MOST BLOCK FROM POSITION
		local blockDepth = 0
		local foundBlock = false
		-- checking 120 blocks deep below point
		for a = 0, getgenv().autoDigsiteConfig.DIG_DEPTH do
			for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
				if v:IsA("Part") then
					-- if block is at the current position
					if (v:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, a, 0))) then
						blockDepth = a
						foundBlock = true
						break
					end
				end
			end
			if foundBlock then
				break
			end
		end

		-- If found block in position, begin digging down
		if foundBlock then

			-- FIND BLOCK TO DIG
			local currentBlock
			-- check all blocks in current digsite for block deepest at current position
			for _, block in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
				if block:IsA("Part") then
					-- if block is correct block
					if (block:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, blockDepth, 0))) then
						-- set current block to block
						currentBlock = block
						break
					end
				end
			end

			for d = blockDepth, getgenv().autoDigsiteConfig.DIG_DEPTH do
				checkForChests()

				-- check if block is breakable, if not, skip
				if tostring(currentBlock.BrickColor) ~= "Really black" then

					-- teleport to block
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentBlock.CFrame + Vector3.new(0, 3, 0)

					-- while the block is there, break it
					while currentBlock:FindFirstChild("Texture") do
						game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigBlock", currentBlock:GetAttribute('Coord'))
						task.wait(getgenv().autoDigsiteConfig.BLOCK_BREAK_DELAY)
					end
				end

				if digsiteReset then
					print("Digsite reset while digging positions, breaking out of loop")
					task.wait(10)
					return
				end

				-- set current block to new block
				local foundNewBlock = false
				for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
					if v:IsA("BasePart") then
						if v:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, d + 1, 0)) then
							currentBlock = v
							foundNewBlock = true
							break
						end
					end
				end

				if not foundNewBlock then
					d = d + 1
				end

				task.wait()
			end
		end
	end

	print("Finished digging in all positions, digging until site reset")

	-- while digsite is not reset
	local checkedBlocks = {}
	while true do
		-- get random blocks and break them
		for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
			-- double checking within block
			if not digsiteReset then
				-- if below specified depth
				if tonumber(v:GetAttribute("Coord").Y) > getgenv().autoDigsiteConfig.DIG_DEPTH then
					checkForChests()

					if v:IsA("Part") and tostring(v.BrickColor) ~= "Really black" then
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 3, 0)
						task.wait()
						while v:FindFirstChild("Texture") do
							game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigBlock", v:GetAttribute('Coord'))
							task.wait(getgenv().autoDigsiteConfig.BLOCK_BREAK_DELAY)
						end
					end
				else
					table.insert(checkedBlocks, v)
				end
			else
				print("Digsite reset while digging, breaking out of loop")
				task.wait(10)
				return
			end
		end
		task.wait()
	end
end

print("Starting Script")

-- ANTI AFK --
if getgenv().autoDigsiteConfig.ANTI_AFK then
	game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false

	if getconnections then
		for _, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
			v:Disable()
		end
	else
		game.Players.LocalPlayer.Idled:Connect(function()
			game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
			task.wait(1)
			game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		end)
	end
end
-- ANTI AFK --



if getgenv().autoDigsiteConfig.OPTIMIZE_GAME then
	pcall(function()
		for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite"):GetChildren()) do
			pcall(function()
				if v.Name == "Ground" then
					v.Transparency = 1
				elseif string.find(v.Name, "rock") or string.find(v.Name, "Sign") then
					v:Destroy()
				elseif v.Name == "Important" then
					v:FindFirstChild("Merchant"):Destroy()
				elseif v.Name == "Map" then
					for _, v2 in pairs(v:GetChildren()) do
						if v2:IsA("Model") or string.find(v2.Name, "Mesh") or string.find(v2.Name, "G7") then
							v2:Destroy()
						end
					end
				end
			end)
		end

		for _, v in pairs(game.Players:GetChildren()) do
			for _, v2 in pairs(v.Character:GetDescendants()) do
				if v2:IsA("BasePart") or v2:IsA("Decal") then
					v2.Transparency = 1
				end
			end
		end

		game.Players.PlayerAdded:Connect(function(player)
			player.CharacterAdded:Connect(function(character)
				for _, v in pairs(character:GetDescendants()) do
					if v:IsA("BasePart") or v:IsA("Decal") then
						v.Transparency = 1
					end
				end
			end)
		end)

		for _, v in pairs(game:GetDescendants()) do
			if v:IsA("Part") or v:IsA("BasePart") then
				v.Transparency = 1
			end
		end

		for _,v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
			if v:IsA("ScreenGui") then
				v.Enabled = false
			end
		end

		for _, v in pairs(game:GetService("StarterGui"):GetChildren()) do
			if v:IsA("ScreenGui") then
				v.Enabled = false
			end
		end

		-- for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
		--     if v:IsA("ScreenGui") then
		--         v.Enabled = false
		--     end
		-- end
	end)

	task.wait(5)
end

require(game:GetService("ReplicatedStorage").Library.Client.WorldFX).AnimateChest = function(...)
	return
end

game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
	task.wait()
	if lootbag then
		game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
		lootbag:Destroy()
	end
end)

game:GetService("Workspace").__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
	task.wait()
	if orb then
		game:GetService("ReplicatedStorage").Network:FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
		orb:Destroy()
	end
end)

-- reset service
task.spawn(function()
	task.wait(5)

	while true do
		-- CHECK IF DIGSITE RESET
		local childRemoved = game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks.ChildRemoved:Connect(function()
			if not digsiteReset and #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 256 then
				print("Digsite reset")
				digsiteReset = true
			end
		end)

		while not digsiteReset do
			task.wait(1)
		end

		childRemoved:Disconnect()

		task.wait(5)
		while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 256 do
			task.wait(1)
		end

		task.spawn(dig)

		while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 336 do
			task.wait(1)
		end
		print("Blocks loaded")
	end
end)

print("Will dig in position configuration: " .. tostring(getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS))
dig()
