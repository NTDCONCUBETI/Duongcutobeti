local saveModule = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local result = saveModule.Get()



-------Sách
if sentEnchant and #listEnchant > 0 then
	for _, enchant in pairs(listEnchant) do
		local enchants = result.Inventory.Enchant
		for i, v in pairs(enchants) do
			if v.id == enchant.name and v.tn == enchant.level then
				for j, username in ipairs(names)do
					local args = {
						username,
						enchant.name,
						"Enchant",
						i,
						enchant.so_luong
					}
					game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
					task.wait(2)
				end
				break
			end
		end
	end
end


-------Thuốc
if sentPotion and #listPotion > 0 then
	for _, Potion in pairs(listPotion) do
		local potions = result.Inventory.Potion
		for i, v in pairs(potions) do
			if v.id == Potion.name and v.tn == Potion.level then
				for j, username in ipairs(names)do
					local args = {
						username,
						Potion.name,
						"Potion",
						i,
						Potion.so_luong
					}
					game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
					task.wait(2)
				end
				break
			end
		end

	end
end

-------Cờ
if sentFlag and #listFlag > 0 then
	for _, Flag in pairs(listFlag) do
		local flag = result.Inventory.Misc
		for i, v in pairs(flag) do
			if v.id == Flag.name then
				for j, username in ipairs(names)do
					local args = {
						username,
						Flag.name,
						"Misc",
						i,
						Flag.so_luong
					}
					game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
					task.wait(2)
				end
				break
			end
		end

	end
end

-------Fruit
if sentFruit and #listFruit > 0 then
	for _, Fruit in pairs(listFruit) do
		local fruits = result.Inventory.Fruit
		for i, v in pairs(fruits) do
			print(v.id)
			if v.id == Fruit.name then
				for j, username in ipairs(names)do
					local args = {
						username,
						Fruit.name,
						"Fruit",
						i,
						Fruit.so_luong
					}
					game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
					task.wait(2)
				end
				break
			end
		end

	end
end

-------PET
if sentPet and #listPet > 0 then
	for _, PET in pairs(listPet) do
		local pet = result.Inventory.Pet
		for i, v in pairs(pet) do
			if v.id == PET.name then
				for j, username in ipairs(names)do
					local args = {
						username,
						PET.name,
						"Pet",
						i,
						PET.so_luong
					}
					game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
					task.wait(2)
				end
				break
			end
		end

	end
end


------GEM
if sentGem then
	local GetSave = function()
		return require(game.ReplicatedStorage.Library.Client.Save).Get()
	end
	for i, v in pairs(GetSave().Inventory.Currency) do
		if v.id == "Diamonds" then
			for j, username in ipairs(names)do
				local args = {
					[1] = username,
					[2] = v.id,
					[3] = "Currency",
					[4] = i,
					[5] = So_Luong_Gem
				}
				game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
				task.wait(2)
			end
			break	
		end
	end
end
